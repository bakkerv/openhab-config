import org.openhab.core.library.types.*
import org.openhab.core.persistence.*
import org.openhab.model.script.actions.*
import java.util.Date
import org.joda.time.*


//var Number counter = 1

rule "Alarm rules"
when
	Item GF_Corridor_Motion changed from CLOSED to OPEN or
	Item GF_Living_Motion changed from CLOSED to OPEN
then
	if (Alarm.state == ON) {
		   pushNotification("Alarm", "Somebody is in the house!")
	}
end

rule "Someone in the corridor switches light"
when
	Item GF_Corridor_Motion changed from CLOSED to OPEN
then
    var now = DateTime::now
	var rise = Daylight_Start_Time.state as DateTimeType
	var set = Daylight_End_Time.state as DateTimeType
	var rise_dt =  new Instant(rise.calendar.timeInMillis)
	var set_dt = new Instant(set.calendar.timeInMillis)
	if ( now.isBefore(rise_dt) || now.isAfter(set_dt) ) {
		sendCommand(GF_Corridor_Lamp, ON)
        	//createTimer(now.plusMinutes(3)) [|
        	//	sendCommand(GF_Corridor_Lamp, OFF)
            	//]
	}
end

rule "Corridor switches off when nobody present"
when
	Item GF_Corridor_Motion changed from OPEN to CLOSED
then
	sendCommand(GF_Corridor_Lamp, OFF)
end


rule "All Lights to on, switch lights"
when
	Item GF_All_lights changed to 1
then
	sendCommand(GF_Living_Lamp_TV, 99)
	sendCommand(GF_Living_Lamp_Bank, 50)
	sendCommand(GF_Living_Lamp_Table, 30)
	sendCommand(GF_Kitchen_Lamp, 40)
end

rule "All Lights to off, switch lights"
when
	Item GF_All_lights changed  to 0
then
	sendCommand(GF_Living_Lamp_TV, 0)
	sendCommand(GF_Living_Lamp_Bank, 0)
	sendCommand(GF_Kitchen_Lamp, 0)
	sendCommand(GF_Living_Lamp_Table, 0)
end

/**
rule "When someone left living room, switch off"
when
	Item GF_Living_Motion changed to CLOSED
then
	if (GF_Living_Lamp_TV.state > 0 || GF_Living_Lamp_Bank.state > 0 || GF_Kitchen_Lamp.state > 0) {
	   sendCommand(GF_Living_Last_Autoswitch, new DateTimeType())
	   sendCommand(GF_All_lights, 0)
	   pushNotification("light", "Ligh auto switched off after 10 minutes")
	}
end
*/

rule "On startup, initialize some values"
when
	System started
then
    sendCommand(GF_Living_Last_Autoswitch, new DateTimeType())
end

rule "When motion sensor living room switches,  switch lights"
when
	Item GF_Living_Motion changed to OPEN or
	Item Daylight_Start_Event changed or
	Item Daylight_End_Event changed
then
	var now = DateTime::now
	var rise = Daylight_Start_Time.state as DateTimeType
	var set = Daylight_End_Time.state as DateTimeType
	var rise_dt =  new Instant(rise.calendar.timeInMillis)
	var set_dt = new Instant(set.calendar.timeInMillis)

	if ( GF_Living_Motion.state == OPEN && 
		!(GF_Living_Lamp_TV.state > 0 || GF_Living_Lamp_Bank.state > 0 || GF_Kitchen_Lamp.state > 0) &&
	 	(now.isBefore(rise_dt) || now.isAfter(set_dt))) {
		sendCommand(GF_All_lights, 1)
		pushNotification("light", "Ligh auto switched on")
	}
end


//
///** shows how to use sensor values from the past */
//rule "Persistence Demo"
//when
//	Time cron "0 * * * * ?"
//then	
//	if(Weather_Temperature.changedSince(now.minusMinutes(1))) {
//		println("2 minutes ago, the temperature was " + Weather_Temperature.historicState(now.minusMinutes(2)) + " degrees.")		
//	}
//end
//
///** 
// * shows how to check recent switch states - very helpful to avoid executing something too often, just
// * because somebody presses a button too often (e.g. sending a notification, if the doorbell button is pressed)
// */
//rule "Persistence Demo 2"
//when
//	Item DemoSwitch received command
//then
//	if(!DemoSwitch.changedSince(now.minusSeconds(5))) {
//		logInfo("Persistence Demo", "You did not press this button during the last 5 seconds!")
//	}
//end
//
//rule "Timer Demo"
//when
//	Item Light_GF_Corridor_Ceiling received command
//then
//	if(receivedCommand==ON) {
//		if(timer==null) {
//			// first ON command, so create a timer to turn the light off again
//			timer = createTimer(now.plusSeconds(10)) [|
//				sendCommand(Light_GF_Corridor_Ceiling, OFF)
//			]
//		} else {
//			// subsequent ON command, so reschedule the existing timer
//			timer.reschedule(now.plusSeconds(10))
//		}
//	} else if(receivedCommand==OFF) {
//		// remove any previously scheduled timer
//		if(timer!=null) {
//			timer.cancel
//			timer = null
//		}	
//	}
//end
//
//// Creates an item that stores the last update time of this item
//rule "Records last weather update time"
//when
//  Item Weather_Temperature received update
//then
//  postUpdate(Weather_LastUpdate, new DateTimeType())
//end
//
//// This rule will be used to test Scale transformation service
//rule "Compute humidex"
//when Item Weather_Temperature changed or
//	 Item Weather_Humidity changed 
//then
//	var Number T = Weather_Temperature.state as DecimalType
//	var Number H = Weather_Humidity.state as DecimalType	
//	var Number x = 7.5 * T/(237.7 + T)
//	var Number e = 6.112 * Math::pow(10, x.doubleValue) * H/100
//	var Number humidex = T + (new Double(5) / new Double(9)) * (e - 10)
//	Weather_Humidex.postUpdate(humidex)
//end
